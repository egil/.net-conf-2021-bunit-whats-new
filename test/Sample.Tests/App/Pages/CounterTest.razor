@inherits TestContext
@code 
{
	[Fact]
	public void Counter_should_increment_when_clicked()
	{
		// Arrange: render the Counter.razor component
		IRenderedFragment cut = Render(@<Counter />);

		// Act: find and click the <button> element to increment
		// the counter in the <p> element
		IElement button = cut.Find("button");
		button.Click();

		// Assert: first find the <p> element, then verify its content
		IElement paragraph = cut.Find("p");
		paragraph.MarkupMatches(@<p role="status">Current count: 1</p>);
	}

	[Fact]
	public void Counter_should_increment_Count_on_FancyParagraph()
	{
		// Arrange
		ComponentFactories.Add<FancyParagraph, DummyParagraph>();
		IRenderedFragment cut = Render(@<Counter />);

		// Act
		IElement button = cut.Find("button");
		button.Click();

		// Assert		
		IRenderedComponent<DummyParagraph> renderedDummyPara = cut.FindComponent<DummyParagraph>();
		DummyParagraph dummyParagraph = renderedDummyPara.Instance;
		Assert.Equal(1, dummyParagraph.Count);
		Assert.False(cut.HasComponent<FancyParagraph>());
	}

	private class DummyParagraph : ComponentBase
	{
		[Parameter] public int Count { get; set; }
	}

	[Fact]
	public void Counter_should_increment_Count_on_FancyParagraph_stub()
	{
		// Arrange
		ComponentFactories.AddStub<FancyParagraph>();
		IRenderedFragment cut = Render(@<Counter />);

		// Act
		IElement button = cut.Find("button");
		button.Click();

		// Assert
		IRenderedComponent<Stub<FancyParagraph>> renderedStubPara 
			= cut.FindComponent<Stub<FancyParagraph>>();
		Stub<FancyParagraph> stubParagraph = renderedStubPara.Instance;
		Assert.Equal(1, stubParagraph.Parameters["Count"]);
	}
}